Phase: section
Input: Token
Options: control = appelt

Rule: section
Priority:50


({Token.string=="Section"}({Token.kind==number}):number):section
-->
{
	gate.AnnotationSet SEC = (AnnotationSet)bindings.get("section");
	gate.AnnotationSet NUM = (AnnotationSet)bindings.get("number");
	gate.AnnotationSet TITLE = (AnnotationSet)bindings.get("title");
	
	gate.FeatureMap features = Factory.newFeatureMap();
	
String titleStr ="";
	
	try {
		gate.AnnotationSet titleToken = gate.Utils.getContainedAnnotations(inputAS, TITLE, "Token");
		java.util.ArrayList tokens = new java.util.ArrayList(titleToken);
		Collections.sort(tokens, new gate.util.OffsetComparator());
		Iterator tokIter =  tokens.iterator();
		while(tokIter.hasNext())
			titleStr+=  " " + (String)((Annotation)tokIter.next()).getFeatures().get("string");}
	 
	catch (Exception e) {
		Out.println(e);
		}
	
String numStr ="";
	
		try {
		gate.AnnotationSet numToken = gate.Utils.getContainedAnnotations(inputAS, NUM, "Token");
		java.util.ArrayList tokens = new java.util.ArrayList(numToken);
		Collections.sort(tokens, new gate.util.OffsetComparator());
		Iterator tokIter =  tokens.iterator();
		while(tokIter.hasNext())
			numStr+=  " " + (String)((Annotation)tokIter.next()).getFeatures().get("string");}
	 
	catch (Exception e) {
		Out.println(e);
		}
		
		features.put("number", numStr); 
		features.put("title", titleStr);
		outputAS.add(SEC.firstNode(), SEC.lastNode(),"Section", features);
}
